# WARNING - EXPERIMENTAL
# this api was derived from here:
# https://github.com/LionWeb-io/specification/blob/niko/bulk-api-spec/bulk/repo-access-api.adoc

openapi: "3.0.3"
info:
  title: "modelix lionweb bulk API adapter"
  description: "modelix lionweb bulk API adapter"
  version: "1.0.0"
servers:
  - url: '/'
    description: modelix-lionweb-adapter

paths:

  /ids:
    post:
      operationId: getIds
      description: Provides unused valid ids.
      parameters:
        - name: count
          description: Number of ids requested. The repository MUST return between one (inclusive) and count (inclusive) ids. It MAY return less than count ids.
          in: "query"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer

  /listPartitions:
    get:
      operationId: listPartitions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SerializationChunk"

  /createPartitions:
    put:
      operationId: createPartitions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SerializationChunk"
      responses:
        "200":
          description: OK

  /deletePartitions:
    put:
      operationId: deletePartitions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SerializationChunk"
      responses:
        "200":
          description: OK

  /{partition}/retrieve:
    get:
      operationId: bulkRetrieve
      parameters:
        - name: partition
          in: "path"
          required: true
          schema:
            type: string
        - name: nodes
          description: List of node ids we want to retrieve from the repository.
          in: "query"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: depthLimit
          description: Limit the depth of retrieved subtrees. Optional parameter, defaults to infinite. If present, MUST be an integer >= 0, with
            0 meaning "return only the nodes with ids listed in nodes parameter",
            1 meaning "return the nodes with id listed in the nodes parameter and their direct children/annotations",
            2 meaning "return the nodes with id listed in the nodes parameter, their direct children/annotations, and the direct children/annotations of these",
            There’s no magic value of depthLimit to express infinite depth. We need to omit the parameter if we don’t want to limit the depth.
          in: "query"
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SerializationChunk"
        "404":
          description: node id not found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "422":
          description: Invalid IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /{partition}/store:
    put:
      operationId: bulkStore
      parameters:
        - name: partition
          in: "path"
          required: true
          schema:
            type: string
      description: Creates new nodes, or updates existing nodes in the repository.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SerializationChunk"
      responses:
        "200":
          description: OK

  /{partition}/delete:
    delete:
      operationId: bulkDelete
      parameters:
        - name: partition
          in: "path"
          required: true
          schema:
            type: string
        - name: nodes
          description: List of node ids we want to retrieve from the repository.
          in: "query"
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
        "404":
          description: node id not found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "422":
          description: Invalid IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

components:
  schemas:
    PartitionArray:
      title: PartitionArray
      type: object
      properties:
        partitions:
          type: array
          items:
            type: string

    SerializationChunk:
      title: SerializationChunk
      type: object
      properties:
        serializationFormatVersion:
          type: string
          default: "2023.1"
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageStructure'
          default: []
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/NodeStructure'
          default: []
#      required:
#        - serializationFormatVersion
#        - languages
#        - nodes

    LanguageStructure:
      title: LanguageStructure
      properties:
        key:
          type: string
        version:
          type: string

    NodeStructure:
      title: NodeStructure
      properties:
        id:
          type: string
        classifier:
          $ref: '#/components/schemas/MetaPointer'
        properties:
          type: array
          items:
            type: object
            properties:
              property:
                $ref: '#/components/schemas/MetaPointer'
              value:
                type: string
            required:
              - property
              - value
        containments:
          type: array
          items:
            type: object
            properties:
              containment:
                $ref: '#/components/schemas/MetaPointer'
              children:
                type: array
                items:
                  type: string
        references:
          type: array
          items:
            type: object
            properties:
              reference:
                $ref: '#/components/schemas/MetaPointer'
              targets:
                type: array
                items:
                  type: object
                  properties:
                    resolveInfo:
                      type: string
                    reference:
                      type: string
        annotations:
          type: array
          items:
            type: string
        parent:
          type: string
      required:
        - id
        - classifier

    MetaPointer:
      title: MetaPointer
      properties:
        language:
          type: string
        version:
          type: string
        key:
          type: string
      required:
        - key
